//function(t:Number, b:Number, c:Number, d:Number):Number {class ContentSlider extends MovieClip {	// set :	var speedLimitedToPixels:Number = 60;	var Speed;	var returnthis:Number;	var maxFrame:Number;	var startX:Number;	var distanceX:Number;	var time:Number = 0;		// added by eric	var mySpeed:Number = 0;	var maxSpeed:Number = 80;	var slideDonePositionThreshold:Number = 0.1;	var slideDoneSpeedThreshold:Number = 0.01;	var finishX:Number = 0;	//var speedApproach:Number = 0.01;	var targetSpeedSteps:Number = 6.5;  // how many steps to use when calculating the target speed, higher number = slower target speed	var speedAdjust:Number = 7;  // the max the speed value can change per tick, essentially adjusts max accel/decel		function ContentSlider () {	}	function currentCurve (timeX:Number, startX:Number, distanceX:Number, duration:Number, speedLimit:Number):Number {		trace ("timeX:Number " + timeX);		trace ("startX:Number " + startX);		trace ("distanceX:Number " + distanceX);		trace ("duration:Number " + duration);		var ts:Number = (timeX /= duration) * timeX;		var tc:Number = ts * timeX;		returnthis = startX + distanceX * ( -5.85*tc*ts + 19.1525*ts*ts + -23.005*tc + 10.905*ts + -0.202499999999998*timeX);		//returnthis = startX + distanceX * (-15.9*tc*ts + 45.7025*ts*ts + -45.905*tc + 17.005*ts + 0.0975000000000023*timeX);		//returnthis = startX + distanceX * (6 * tc * ts + -15 *       ts * ts + 10      * tc);		//returnthis = startX + distanceX * (1.5 * tc * ts + -1.9475 * ts * ts + -1.905 * tc + 2.805 * ts + 0.5475 * timeX);		//return         							   a*tc*ts +      b*ts*ts       +   c*tc     // + d*ts + e*t;		trace (' returnthis :  ' + returnthis);		Speed = returnthis - _x;		trace (" Speed : " + Speed);		if (Math.abs (Speed) > speedLimit) {			var temp;			returnthis = _x + (speedLimit * (Speed / Math.abs (Speed)));			trace ("===================================");			var temp = (speedLimit * (Speed / Math.abs (Speed)));			trace ("Speedlimit reached and governed to : " + temp);			//			trace (" _root.slider.maxFrame : " + _root.contentSlider_mc.maxFrame);			trace ("this.maxFrame  : " + this.maxFrame);			this.maxFrame++;			//			Speed = 0;		}		return returnthis;	}	function setMovement (to) {		//this.speedLimitedToPixels = 100;		this.maxFrame = 30;		this.startX = this._x;		this.finishX = to;		this.distanceX = to - this.startX;		this.time = 0;		this.mySpeed = 2;		this.onEnterFrame = this.slideIt;	}	function slideIt () {		var targetSpeed = ( finishX - this._x ) / targetSpeedSteps;				if( targetSpeed <= mySpeed - speedAdjust )		{			mySpeed -= speedAdjust;		}		else if( targetSpeed >= mySpeed + speedAdjust )		{			mySpeed += speedAdjust;		}		else		{			mySpeed = targetSpeed;		}				if( mySpeed < 0 - maxSpeed )		{			mySpeed = 0 - maxSpeed;		}		else if( mySpeed > maxSpeed )		{			mySpeed = maxSpeed;		}				this._x += mySpeed;				if( Math.abs( this._x - finishX ) <= slideDonePositionThreshold && Math.abs( mySpeed ) <= slideDoneSpeedThreshold )		{			delete this.onEnterFrame;		}						/*var max = this.maxFrame;		//trace ("max : " + max);		//		if (this.time++ < max) {			trace (this.time);			with (this) {				_x = currentCurve (time, startX, distanceX, max, speedLimitedToPixels);			}		} else {			delete this.onEnterFrame;		}*/	}}